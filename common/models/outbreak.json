{
  "name": "outbreak",
  "base": "extendedPersistedModel",
  "idInjection": true,
  "options": {
    "validateUpsert": true
  },
  "properties": {
    "name": {
      "type": "string",
      "required": true
    },
    "description": {
      "type": "string"
    },
    "disease": {
      "type": "string",
      "required": true
    },
    "countries": {
      "type": [
        "string"
      ],
      "required": true
    },
    "startDate": {
      "type": "date",
      "required": true
    },
    "endDate": {
      "type": "date"
    },
    "longPeriodsBetweenCaseOnset": {
      "type": "number",
      "description": "Number of days used for defining long periods in the dates of onset between cases in the chain of transmission",
      "required": true
    },
    "periodOfFollowup": {
      "type": "number",
      "description": "Duration for the follow-up period in days",
      "required": true
    },
    "frequencyOfFollowUp": {
      "type": "number",
      "required": true,
      "description": "Frequency of follow ups in days (once every X days/daily)"
    },
    "frequencyOfFollowUpPerDay": {
      "type": "number",
      "required": true,
      "description": "Number of follow ups to be generated per day"
    },
    "noDaysAmongContacts": {
      "type": "number",
      "required": true,
      "description": "Number of days used to calculate the proportion of new cases detected among known contacts"
    },
    "noDaysDaysInChains": {
      "type": "number",
      "required": true,
      "description": "Number of days used to calculate the proportion of new cases in known transmission chains"
    },
    "noDaysNotSeen": {
      "type": "number",
      "required": true,
      "description": "Number of days used to filter a list of contacts not seen for a specific number of days"
    },
    "noLessContacts": {
      "type": "number",
      "required": true,
      "description": "Number of contacts used to determine the proportion of cases with less than X contacts"
    },
    "noDaysNewContacts": {
      "type": "number",
      "description": "Number of days used to determine if a contact is new",
      "default": 1
    },
    "fieldsToDisplayNode": {
      "type": [
        "string"
      ]
    },
    "colorContactNode": {
      "type": "string"
    },
    "colorCaseClassifications": {
      "type": "array"
    },
    "iconPeopleDied": {
      "type": "string"
    },
    "iconEvents": {
      "type": "string"
    },
    "caseInvestigationTemplate": {
      "type": [
        "templateQuestion"
      ],
      "required": true
    },
    "contactFollowUpTemplate": {
      "type": [
        "templateQuestion"
      ],
      "required": true
    },
    "labResultsTemplate": {
      "type": [
        "templateQuestion"
      ],
      "required": true
    },
    "caseIdMask": {
      "type": "string",
      "required": true,
      "pattern": "^(?:(?!š).)*(?:9*0+|9+0*)[^š]*$",
      "default": "9999999999"
    }
  },
  "indexes": {
    "name_index": {
      "name": 1
    },
    "disease_index": {
      "disease": 1
    },
    "startDate_index": {
      "startDate": 1
    }
  },
  "validations": [],
  "relations": {
    "cases": {
      "type": "hasMany",
      "model": "case",
      "foreignKey": "outbreakId"
    },
    "clusters": {
      "type": "hasMany",
      "model": "cluster",
      "foreignKey": "outbreakId"
    },
    "contacts": {
      "type": "hasMany",
      "model": "contact",
      "foreignKey": "outbreakId"
    },
    "events": {
      "type": "hasMany",
      "model": "event",
      "foreignKey": "outbreakId"
    },
    "referenceData": {
      "type": "hasMany",
      "model": "referenceData",
      "foreignKey": "outbreakId"
    },
    "followUps": {
      "type": "hasMany",
      "model": "followUp",
      "foreignKey": "outbreakId"
    }
  },
  "acls": [
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "DENY"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "find"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "create"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "patchAttributes"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "findById"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "deleteById"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "count"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__get__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "__get__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__create__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__findById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__updateById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__destroyById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__count__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__get__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "__get__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "__create__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__findById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "__updateById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "__destroyById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__count__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__get__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__create__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__findById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__updateById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__destroyById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__count__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__get__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "__create__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__findById__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "__updateById__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "__destroyById__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__count__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "restoreContactFollowUp"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "findCaseRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "findContactRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "findEventRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "createCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "createContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "createEventRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "getCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "getContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "getEventRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "updateCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "updateContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "updateEventRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "deleteCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "deleteContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "deleteEventRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "countCaseRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "countContactRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "countEventRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "convertContactToCase"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "convertCaseToContact"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "getLocations"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "restoreCase"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__get__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "__get__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__create__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__findById__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__updateById__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__destroyById__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__count__events"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "getReferenceData"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "__create__referenceData"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "__findById__referenceData"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "__updateById__referenceData"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "__destroyById__referenceData"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "generateVisualId"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "generateVisualId"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "generateUniqueId"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "getCaseQRResourceLink"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "getContactQRResourceLink"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "getEventQRResourceLink"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "__get__clusters"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "__findById__clusters"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "__create__clusters"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "__updateById__clusters"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "__destroyById__clusters"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "__count__clusters"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__get__clusters__relationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__get__clusters__relationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__count__clusters__relationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__count__clusters__relationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "countNewContactsByExposure"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "generateFollowups"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "filteredCountCases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "filteredCountCases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "countIndependentTransmissionChains"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "getIndependentTransmissionChains"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__get__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__findById__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__count__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "countContactsSeen"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "countContactsLostToFollowup"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "countNewCasesInKnownTransmissionChains"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "countCasesWithLessThanXContacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "countEventNewContacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "longPeriodsBetweenDatesOfOnsetInTransmissionChains"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "buildNewChainsFromRegisteredContactsWhoBecameCases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "countNewChainsFromRegisteredContactsWhoBecameCases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_report",
      "permission": "ALLOW",
      "property": "countCasesContacts"
    }
  ],
  "methods": {
    "prototype.findCaseRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationships",
          "type": [
            "relationship"
          ],
          "description": "Relationships of a case",
          "root": true,
          "required": true
        }
      ],
      "description": "Queries relationships of case.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/relationships"
      }
    },
    "prototype.createCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Created Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Creates a new instance in relationships of this model.",
      "http": {
        "verb": "post",
        "path": "/cases/:nk/relationships"
      }
    },
    "prototype.getCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Relationship of a case",
          "root": true,
          "required": true
        }
      ],
      "description": "Find a related item by id for relationships.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/relationships/:fk"
      }
    },
    "prototype.updateCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for case"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Updated Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Update a related item by id for relationships.",
      "http": {
        "verb": "put",
        "path": "/cases/:nk/relationships/:fk"
      }
    },
    "prototype.deleteCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for case"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "object",
          "root": true,
          "required": true
        }
      ],
      "description": "Delete a related item by id for relationships.",
      "http": {
        "verb": "del",
        "path": "/cases/:nk/relationships/:fk"
      }
    },
    "prototype.countCaseRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "where",
          "type": "object",
          "description": "Criteria to match model instances"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "number",
          "description": "Number of relationships of a case",
          "required": true
        }
      ],
      "description": "Counts relationships of case.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/relationships/count"
      }
    },
    "prototype.findContactRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationships",
          "type": [
            "relationship"
          ],
          "description": "Relationships of a contact",
          "root": true,
          "required": true
        }
      ],
      "description": "Queries relationships of contacts.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/relationships"
      }
    },
    "prototype.createContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contact"
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Created Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Creates a new instance in relationships of this model.",
      "http": {
        "verb": "post",
        "path": "/contacts/:nk/relationships"
      }
    },
    "prototype.getContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Relationship of a contact",
          "root": true,
          "required": true
        }
      ],
      "description": "Find a related item by id for relationships.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/relationships/:fk"
      }
    },
    "prototype.updateContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contact"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Updated Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Update a related item by id for relationships.",
      "http": {
        "verb": "put",
        "path": "/contacts/:nk/relationships/:fk"
      }
    },
    "prototype.deleteContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contact"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "object",
          "root": true,
          "required": true
        }
      ],
      "description": "Delete a related item by id for relationships.",
      "http": {
        "verb": "del",
        "path": "/contacts/:nk/relationships/:fk"
      }
    },
    "prototype.countContactRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "where",
          "type": "object",
          "description": "Criteria to match model instances"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "number",
          "description": "Number of relationships of a contact",
          "required": true
        }
      ],
      "description": "Counts relationships of contact.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/relationships/count"
      }
    },
    "prototype.findEventRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for events"
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationships",
          "type": [
            "relationship"
          ],
          "description": "Relationships of a event",
          "root": true,
          "required": true
        }
      ],
      "description": "Queries relationships of event.",
      "http": {
        "verb": "get",
        "path": "/events/:nk/relationships"
      }
    },
    "prototype.createEventRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for events"
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Created Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Creates a new instance in relationships of this model.",
      "http": {
        "verb": "post",
        "path": "/events/:nk/relationships"
      }
    },
    "prototype.getEventRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for events"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Relationship of a event",
          "root": true,
          "required": true
        }
      ],
      "description": "Find a related item by id for relationships.",
      "http": {
        "verb": "get",
        "path": "/events/:nk/relationships/:fk"
      }
    },
    "prototype.updateEventRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for event"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Updated Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Update a related item by id for relationships.",
      "http": {
        "verb": "put",
        "path": "/events/:nk/relationships/:fk"
      }
    },
    "prototype.deleteEventRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for event"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "object",
          "root": true,
          "required": true
        }
      ],
      "description": "Delete a related item by id for relationships.",
      "http": {
        "verb": "del",
        "path": "/events/:nk/relationships/:fk"
      }
    },
    "prototype.countEventRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for events"
        },
        {
          "arg": "where",
          "type": "object",
          "description": "Criteria to match model instances"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "number",
          "description": "Number of relationships of a event",
          "required": true
        }
      ],
      "description": "Counts relationships of event.",
      "http": {
        "verb": "get",
        "path": "/events/:nk/relationships/count"
      }
    },
    "prototype.convertContactToCase": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        }
      ],
      "returns": [
        {
          "arg": "case",
          "type": "case",
          "description": "Case resulted from the conversion",
          "required": true,
          "root": true
        }
      ],
      "description": "Converts contact to case.",
      "http": {
        "verb": "post",
        "path": "/contacts/:nk/convert-to-case"
      }
    },
    "prototype.convertCaseToContact": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        }
      ],
      "returns": [
        {
          "arg": "contact",
          "type": "contact",
          "description": "Contact resulted from the conversion",
          "required": true,
          "root": true
        }
      ],
      "description": "Converts case to contact.",
      "http": {
        "verb": "post",
        "path": "/cases/:nk/convert-to-contact"
      }
    },
    "prototype.getLocations": {
      "accepts": [],
      "returns": [
        {
          "arg": "locations",
          "type": [
            "location"
          ],
          "description": "Locations for the Outbreak",
          "root": true,
          "required": true
        }
      ],
      "description": "Retrieve the list of location + sublocations for the Outbreak",
      "http": {
        "verb": "get",
        "path": "/locations"
      }
    },
    "prototype.restoreCase": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        }
      ],
      "returns": [
        {
          "arg": "case",
          "type": [
            "case"
          ],
          "description": "Case",
          "root": true,
          "required": true
        }
      ],
      "description": "Restores a deleted case.",
      "http": {
        "verb": "post",
        "path": "/cases/:nk/restore"
      }
    },
    "prototype.getReferenceData": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "referenceData",
          "type": [
            "referenceData"
          ],
          "description": "System and outbreak specific reference data",
          "root": true,
          "required": true
        }
      ],
      "description": "Queries system and outbreak specific reference data list.",
      "http": {
        "verb": "get",
        "path": "/reference-data"
      }
    },
    "prototype.generateVisualId": {
      "accepts": [],
      "returns": [
        {
          "arg": "visualId",
          "type": "string",
          "description": "Visual ID",
          "root": true,
          "required": true
        }
      ],
      "description": "Generates the next (available) visual ID based on the outbreak mask.",
      "http": {
        "verb": "post",
        "path": "/generate-visual-id"
      }
    },
    "generateUniqueId": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        }
      ],
      "returns": [
        {
          "arg": "uniqueId",
          "type": "string",
          "description": "Unique ID",
          "root": true,
          "required": true
        }
      ],
      "description": "Generates a globally unique ID (UUID).",
      "http": {
        "verb": "post",
        "path": "/generate-unique-id"
      }
    },
    "prototype.getCaseQRResourceLink": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        }
      ],
      "returns": [
        {
          "arg": "body",
          "type": "file",
          "root": true,
          "required": true
        },
        {
          "arg": "Content-Type",
          "type": "string",
          "http": {
            "target": "header"
          }
        },
        {
          "arg": "Content-Disposition",
          "type": "string",
          "http": {
            "target": "header"
          }
        }
      ],
      "description": "Get a resource link embedded in a QR Code Image (png) for a case.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/qr-resource-link"
      }
    },
    "prototype.getContactQRResourceLink": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        }
      ],
      "returns": [
        {
          "arg": "body",
          "type": "file",
          "root": true,
          "required": true
        },
        {
          "arg": "Content-Type",
          "type": "string",
          "http": {
            "target": "header"
          }
        },
        {
          "arg": "Content-Disposition",
          "type": "string",
          "http": {
            "target": "header"
          }
        }
      ],
      "description": "Get a resource link embedded in a QR Code Image (png) for a contact.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/qr-resource-link"
      }
    },
    "prototype.getEventQRResourceLink": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for events"
        }
      ],
      "returns": [
        {
          "arg": "body",
          "type": "file",
          "root": true,
          "required": true
        },
        {
          "arg": "Content-Type",
          "type": "string",
          "http": {
            "target": "header"
          }
        },
        {
          "arg": "Content-Disposition",
          "type": "string",
          "http": {
            "target": "header"
          }
        }
      ],
      "description": "Get a resource link embedded in a QR Code Image (png) for a event.",
      "http": {
        "verb": "get",
        "path": "/events/:nk/qr-resource-link"
      }
    },
    "prototype.countNewContactsByExposure": {
      "accepts": [],
      "returns": [
        {
          "arg": "counters",
          "type": {
            "{exposureTypeId}": "number"
          },
          "description": "Object containing new contacts counters for each found exposure type",
          "root": true,
          "required": true
        }
      ],
      "description": "Count the new contacts and groups them by exposure type",
      "http": {
        "verb": "get",
        "path": "/contacts/new-by-exposure-type/count"
      }
    },
    "prototype.filteredCountCases": {
      "accepts":[
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "number",
          "description": "Number of cases that pass the filter",
          "required": true
        }
      ],
      "description": "Counts the cases that pass a filter (which now can accept relations)",
      "http": {
        "verb": "get",
        "path": "/cases/filtered-count"
      }
    },
    "prototype.restoreContactFollowUp": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for followUps"
        }
      ],
      "returns": [
        {
          "arg": "followUp",
          "type": [
            "followUp"
          ],
          "description": "Follow Up",
          "root": true,
          "required": true
        }
      ],
      "description": "Restores a deleted follow-up.",
      "http": {
        "verb": "post",
        "path": "/contacts/:nk/follow-ups/:fk/restore"
      }
    },
    "prototype.generateFollowups": {
      "accepts": [
        {
          "arg": "body",
          "type": "object",
          "description": "Follow up period in days. Property: followUpPeriod [number]",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "generatedFollowUps",
          "type": [
            {
              "type": {
                "contactId": {
                  "type": "string"
                },
                "followUps": {
                  "type": [
                    "followUp"
                  ]
                }
              }
            }
          ],
          "description": "Generated Follow Ups",
          "root": true,
          "required": true
        }
      ],
      "description": "Generate a list of follow-ups",
      "http": {
        "verb": "post",
        "path": "/generate-followups"
      }
    },
    "prototype.countIndependentTransmissionChains": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "chains",
          "type": {
            "chains": [
              {
                "type": {
                  "length": "number",
                  "active": "boolean"
                }
              }
            ],
            "length": "number",
            "activeChainsCount": "number",
            "isolatedNodesCount": "number"
          },
          "description": "Number of transmission chains and the length of each chain",
          "required": true,
          "root": true
        }
      ],
      "description": "Count the number of independent transmission chains",
      "http": {
        "verb": "get",
        "path": "/relationships/independent-transmission-chains/filtered-count"
      }
    },
    "prototype.getIndependentTransmissionChains": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "chains",
          "type": {
            "nodes": {
              "type": {
                "<personId>": {
                  "type": "person"
                }
              }
            },
            "edges": {
              "type": {
                "<relationshipId>": {
                  "type": "relationship"
                }
              }
            },
            "transmissionChains": {
              "type": {
                "chains": [
                  {
                    "type": {
                      "chain": [
                        "string"
                      ],
                      "active": "boolean"
                    }
                  }
                ],
                "length": "number"
              }
            }
          },
          "description": "Independent transmission chains",
          "required": true,
          "root": true
        }
      ],
      "description": "Get independent transmission chains",
      "http": {
        "verb": "get",
        "path": "/relationships/independent-transmission-chains"
      }
    },
    "prototype.countContactsSeen": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "counters",
          "type": {
            "contactsSeen": "number",
            "teams": [
              {
                "type": {
                  "id": "string",
                  "contactsSeen": "number"
                }
              }
            ]
          },
          "description": "Object containing counters for seen contacts",
          "root": true,
          "required": true
        }
      ],
      "description": "Count the total number of seen contacts as well as per team",
      "http": {
        "verb": "get",
        "path": "/follow-ups/contacts-seen/count"
      }
    },
    "prototype.countContactsLostToFollowup": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "counters",
          "type": {
            "contactsLostToFollowup": "number",
            "teams": [
              {
                "type": {
                  "id": "string",
                  "contactsLostToFollowup": "number"
                }
              }
            ]
          },
          "description": "Object containing counters for contacts lost to follow-up",
          "root": true,
          "required": true
        }
      ],
      "description": "Count the total number of contacts lost to follow-up as well as per team",
      "http": {
        "verb": "get",
        "path": "/follow-ups/contacts-lost-to-follow-up/count"
      }
    },
    "prototype.countCasesWithLessThanXContacts": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"}); Note: this request also accepts 'noLessContacts' number on the first level in 'where'"
        }
      ],
      "returns": [
        {
          "arg": "counters",
          "type": {
            "casesCount": {
              "type": "number",
              "description": "Number of cases with less than X contacts",
              "required": true
            },
            "caseIDs": {
              "type": ["string"],
              "description": "Array with IDs of cases with less than X contacts",
              "required": true
            },
            "cases": [
              {
                "type": {
                  "id": "string",
                  "contactsCount": {
                    "type": "number",
                    "description": "Number of contacts for case",
                    "required": true
                  },
                  "contactIDs": [
                    "string"
                  ]
                },
                "description": "Array with information for the cases with less than X contacts"
              }
            ]
          },
          "required": true,
          "root": true
        }
      ],
      "description": "Count the number of cases with less than X contacts; Also return the case IDs",
      "http": {
        "verb": "get",
        "path": "/relationships/cases-with-less-than-x-contacts/count"
      }
    },
    "prototype.countNewCasesInKnownTransmissionChains": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"}); Note: this request also accepts 'noDaysDaysInChains' number on the first level in 'where'"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": {
            "newCases": "number",
            "total": "number"
          },
          "description": "Retrieve number of new cases in known transmission chains",
          "root": true,
          "required": true
        }
      ],
      "description": "Count the number of new cases vs total number of cases in known transmission chains",
      "http": {
        "verb": "get",
        "path": "/relationships/new-cases-in-transmission-chains/count"
      }
    },
    "prototype.countEventNewContacts": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"}); Note: this request also accepts 'noDaysNewContacts' number on the first level in 'where'"
        }
      ],
      "returns": [
        {
          "arg": "counters",
          "type": {
            "newContactsCount": "number",
            "events": [
              {
                "type": {
                  "id": "string",
                  "newContactsCount": "number",
                  "contactIDs": [
                    "string"
                  ]
                }
              }
            ]
          },
          "description": "Object containing counters for new contacts for each event",
          "root": true,
          "required": true
        }
      ],
      "description": "Count the number of new contacts for each event",
      "http": {
        "verb": "get",
        "path": "/relationships/events-new-contacts/count"
      }
    },
    "prototype.longPeriodsBetweenDatesOfOnsetInTransmissionChains": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationships",
          "type": ["relationship"],
          "description": "List of relationships that links cases with long periods between the dates of onset (includes people relation and the time difference in differenceBetweenDatesOfOnset param)",
          "root": true,
          "required": true
        }
      ],
      "description": "Get a list of relationships that links cases with long periods between the dates of onset",
      "http": {
        "verb": "get",
        "path": "/relationships/long-periods-between-dates-of-onset-in-transmission-chains"
      }
    },
    "prototype.buildNewChainsFromRegisteredContactsWhoBecameCases": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "chains",
          "type": {
            "nodes": {
              "type": {
                "<personId>": {
                  "type": "person"
                }
              }
            },
            "edges": {
              "type": {
                "<relationshipId>": {
                  "type": "relationship"
                }
              }
            },
            "transmissionChains": {
              "type": {
                "chains": [
                  {
                    "type": {
                      "chain": [
                        "string"
                      ],
                      "active": "boolean"
                    }
                  }
                ],
                "length": "number"
              }
            }
          },
          "description": "New transmission chains",
          "required": true,
          "root": true
        }
      ],
      "description": "Build new transmission chains from registered contacts who became cases",
      "http": {
        "verb": "get",
        "path": "/relationships/new-transmission-chains-from-registered-contacts-who-became-cases"
      }
    },
    "prototype.countNewChainsFromRegisteredContactsWhoBecameCases": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "chains",
          "type": {
            "chains": [
              {
                "type": {
                  "length": "number",
                  "active": "boolean"
                }
              }
            ],
            "length": "number",
            "activeChainsCount": "number",
            "isolatedNodesCount": "number"
          },
          "description": "Number of transmission chains and the length of each chain",
          "required": true,
          "root": true
        }
      ],
      "description": "Count new transmission chains from registered contacts who became cases",
      "http": {
        "verb": "get",
        "path": "/relationships/new-transmission-chains-from-registered-contacts-who-became-cases/filtered-count"
      }
    },
    "prototype.countCasesContacts": {
      "accepts": [
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "counters",
          "type": {
            "casesCount": {
              "type": "number",
              "description": "Total number of cases",
              "required": true
            },
            "contactsCount": {
              "type": "number",
              "description": "Total number of contacts related to cases; Note there might be other contacts related to events.",
              "required": true
            },
            "averageNoContactsPerCase": {
              "type": "number",
              "description": "Average Number of contacts per case",
              "required": true
            },
            "meanNoContactsPerCase": {
              "type": "number",
              "description": "Mean Number of contacts per case",
              "required": true
            },
            "medianNoContactsPerCase": {
              "type": "number",
              "description": "Median Number of contacts per case",
              "required": true
            },
            "cases": [
              {
                "type": {
                  "id": "string",
                  "contactsCount": {
                    "type": "number",
                    "description": "Number of contacts for case",
                    "required": true
                  },
                  "contactIDs": [
                    "string"
                  ]
                }
              }
            ]
          },
          "description": "Object containing counters for contacts per case",
          "root": true,
          "required": true
        }
      ],
      "description": "Count the number of contacts for each case; Additionally calculate average/mean/median",
      "http": {
        "verb": "get",
        "path": "/relationships/contacts-per-case/count"
      }
    }
  }
}
