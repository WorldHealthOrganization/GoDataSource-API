{
  "name": "outbreak",
  "base": "extendedPersistedModel",
  "idInjection": true,
  "options": {
    "validateUpsert": true
  },
  "properties": {
    "name": {
      "type": "string",
      "required": true
    },
    "description": {
      "type": "string"
    },
    "disease": {
      "type": "string",
      "required": true
    },
    "countries": {
      "type": ["string"],
      "required": true
    },
    "startDate": {
      "type": "date",
      "required": true
    },
    "endDate": {
      "type": "date"
    },
    "longPeriodsBetweenCaseOnset": {
      "type": "number",
      "description": "Number of days used for defining long periods in the dates of onset between cases in the chain of transmission",
      "required": true
    },
    "periodOfFollowup": {
      "type": "number",
      "description": "Duration for the follow-up period in days",
      "required": true
    },
    "frequencyOfFollowUp": {
      "type": "number",
      "required": true
    },
    "noDaysAmongContacts": {
      "type": "number",
      "required": true,
      "description": "Number of days used to calculate the proportion of new cases detected among known contacts"
    },
    "noDaysDaysInChains": {
      "type": "number",
      "required": true,
      "description": "Number of days used to calculate the proportion of new cases in known transmission chains"
    },
    "noDaysNotSeen": {
      "type": "number",
      "required": true,
      "description": "Number of days used to filter a list of contacts not seen for a specific number of days"
    },
    "noLessContacts": {
      "type": "number",
      "required": true,
      "description": "Number of contacts used to determine the proportion of cases with less than X contacts"
    },
    "fieldsToDisplayNode": {
      "type": ["string"]
    },
    "colorContactNode": {
      "type": "string"
    },
    "colorCaseClassifications": {
      "type": "array"
    },
    "iconPeopleDied": {
      "type": "string"
    },
    "iconEvents": {
      "type": "string"
    },
    "caseInvestigationTemplate": {
      "type": [
        "templateQuestion"
      ],
      "required": true
    },
    "contactFollowUpTemplate": {
      "type": [
        "templateQuestion"
      ],
      "required": true
    },
    "labResultsTemplate": {
      "type": [
        "templateQuestion"
      ],
      "required": true
    },
    "caseIdMask": {
      "type": "string",
      "required": true,
      "pattern": "^(?:(?!š).)*(?:9*0+|9+0*)[^š]*$"
    }
  },
  "indexes": {
    "name_index": {
      "name": 1
    },
    "disease_index": {
      "disease": 1
    },
    "startDate_index": {
      "startDate": 1
    }
  },
  "validations": [],
  "relations": {
    "cases": {
      "type": "hasMany",
      "model": "case",
      "foreignKey": "outbreakId"
    },
    "clusters": {
      "type": "hasMany",
      "model": "cluster",
      "foreignKey": "outbreakId"
    },
    "contacts": {
      "type": "hasMany",
      "model": "contact",
      "foreignKey": "outbreakId"
    },
    "events": {
      "type": "hasMany",
      "model": "event",
      "foreignKey": "outbreakId"
    }
  },
  "acls": [
    {
      "principalType": "ROLE",
      "principalId": "$everyone",
      "permission": "DENY"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "find"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "create"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "patchAttributes"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "findById"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_outbreak",
      "permission": "ALLOW",
      "property": "deleteById"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "getAvailableDateFormats"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_outbreak",
      "permission": "ALLOW",
      "property": "count"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__get__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__create__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "__create__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__findById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__updateById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "__updateById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__destroyById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "__destroyById__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__count__cases"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__get__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "__create__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "__create__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__findById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "__updateById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "__updateById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "__destroyById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "__destroyById__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "__count__contacts"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__get__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__create__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "__create__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__findById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__updateById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "__updateById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "__destroyById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "__destroyById__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "__count__cases__labResults"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__get__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "__create__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__findById__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "__updateById__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_followup",
      "permission": "ALLOW",
      "property": "__destroyById__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_followup",
      "permission": "ALLOW",
      "property": "__count__contacts__followUps"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "findCaseRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "findContactRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "createCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "createCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "createContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "createContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "getCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "getContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "updateCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "updateCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "updateContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "updateContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "deleteCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "deleteCaseRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "deleteContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "deleteContactRelationship"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_case",
      "permission": "ALLOW",
      "property": "countCaseRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "read_contact",
      "permission": "ALLOW",
      "property": "countContactRelationships"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_contact",
      "permission": "ALLOW",
      "property": "convertContactToCase"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_contact",
      "permission": "ALLOW",
      "property": "convertContactToCase"
    },
    {
      "principalType": "ROLE",
      "principalId": "$authenticated",
      "permission": "ALLOW",
      "property": "getLocations"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_case",
      "permission": "ALLOW",
      "property": "restoreCase"
    },
    {
      "principalType": "ROLE",
      "principalId": "write_own_case",
      "permission": "ALLOW",
      "property": "restoreCase"
    }
  ],
  "methods": {
    "getAvailableDateFormats": {
      "accepts": [],
      "returns": [
        {
          "arg": "dateFormats",
          "type": [
            "string"
          ],
          "description": "List of available date formats",
          "root": true,
          "required": true
        }
      ],
      "description": "Retrieve the list of available date formats.",
      "http": {
        "verb": "get",
        "path": "/available-date-formats"
      }
    },
    "prototype.findCaseRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationships",
          "type": [
            "relationship"
          ],
          "description": "Relationships of a case",
          "root": true,
          "required": true
        }
      ],
      "description": "Queries relationships of case.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/relationships"
      }
    },
    "prototype.createCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Created Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Creates a new instance in relationships of this model.",
      "http": {
        "verb": "post",
        "path": "/cases/:nk/relationships"
      }
    },
    "prototype.getCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Relationship of a case",
          "root": true,
          "required": true
        }
      ],
      "description": "Find a related item by id for relationships.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/relationships/:fk"
      }
    },
    "prototype.updateCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for case"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Updated Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Update a related item by id for relationships.",
      "http": {
        "verb": "put",
        "path": "/cases/:nk/relationships/:fk"
      }
    },
    "prototype.deleteCaseRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for case"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "object",
          "root": true,
          "required": true
        }
      ],
      "description": "Delete a related item by id for relationships.",
      "http": {
        "verb": "del",
        "path": "/cases/:nk/relationships/:fk"
      }
    },
    "prototype.countCaseRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        },
        {
          "arg": "where",
          "type": "object",
          "description": "Criteria to match model instances"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "number",
          "description": "Number of relationships of a case",
          "required": true
        }
      ],
      "description": "Counts relationships of case.",
      "http": {
        "verb": "get",
        "path": "/cases/:nk/relationships/count"
      }
    },
    "prototype.findContactRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationships",
          "type": [
            "relationship"
          ],
          "description": "Relationships of a contact",
          "root": true,
          "required": true
        }
      ],
      "description": "Queries relationships of contacts.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/relationships"
      }
    },
    "prototype.createContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contact"
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Created Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Creates a new instance in relationships of this model.",
      "http": {
        "verb": "post",
        "path": "/contacts/:nk/relationships"
      }
    },
    "prototype.getContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "filter",
          "type": "object",
          "description": "Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})"
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Relationship of a contact",
          "root": true,
          "required": true
        }
      ],
      "description": "Find a related item by id for relationships.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/relationships/:fk"
      }
    },
    "prototype.updateContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contact"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        },
        {
          "arg": "data",
          "type": "object",
          "model": "relationship",
          "description": "Model instance data",
          "http": {
            "source": "body"
          },
          "root": true,
          "required": true
        }
      ],
      "returns": [
        {
          "arg": "relationship",
          "type": "relationship",
          "description": "Updated Relationship",
          "root": true,
          "required": true
        }
      ],
      "description": "Update a related item by id for relationships.",
      "http": {
        "verb": "put",
        "path": "/contacts/:nk/relationships/:fk"
      }
    },
    "prototype.deleteContactRelationship": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contact"
        },
        {
          "arg": "fk",
          "type": "string",
          "description": "Foreign key for relationships."
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "object",
          "root": true,
          "required": true
        }
      ],
      "description": "Delete a related item by id for relationships.",
      "http": {
        "verb": "del",
        "path": "/contacts/:nk/relationships/:fk"
      }
    },
    "prototype.countContactRelationships": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        },
        {
          "arg": "where",
          "type": "object",
          "description": "Criteria to match model instances"
        }
      ],
      "returns": [
        {
          "arg": "count",
          "type": "number",
          "description": "Number of relationships of a contact",
          "required": true
        }
      ],
      "description": "Counts relationships of contact.",
      "http": {
        "verb": "get",
        "path": "/contacts/:nk/relationships/count"
      }
    },
    "prototype.convertContactToCase": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for contacts"
        }
      ],
      "returns": [
        {
          "arg": "case",
          "type": "case",
          "description": "Case resulted from the conversion",
          "required": true,
          "root": true
        }
      ],
      "description": "Converts contact to case.",
      "http": {
        "verb": "post",
        "path": "/contacts/:nk/convert-to-case"
      }
    },
    "prototype.getLocations": {
      "accepts": [],
      "returns": [
        {
          "arg": "locations",
          "type": [
            "location"
          ],
          "description": "Locations for the Outbreak",
          "root": true,
          "required": true
        }
      ],
      "description": "Retrieve the list of location + sublocations for the Outbreak",
      "http": {
        "verb": "get",
        "path": "/locations"
      }
    },
    "prototype.restoreCase": {
      "accepts": [
        {
          "arg": "nk",
          "type": "string",
          "description": "Foreign key for cases"
        }
      ],
      "returns": [
        {
          "arg": "case",
          "type": [
            "case"
          ],
          "description": "Case",
          "root": true,
          "required": true
        }
      ],
      "description": "Restores a deleted case.",
      "http": {
        "verb": "post",
        "path": "/cases/:nk/restore"
      }
    }
  }
}
